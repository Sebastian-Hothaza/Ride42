#!/usr/bin/env node
/**
 * Module dependencies.
 */
require('dotenv').config();
// CHECK REQUIRED ENV VARIABLES
const requiredEnv = [
  'NODE_ENV',
  'MONGODB_URI',

  'ADMIN_EMAIL',
  'ADMIN_EMAIL_HOST',
  'ADMIN_EMAIL_PASSWORD',

  'CORS_ORIGIN',

  'JWT_ACCESS_CODE',
  'JWT_REFRESH_CODE',
  'JWT_ACCESS_TOKEN_EXPIRATION',
  'JWT_REFRESH_TOKEN_EXPIRATION',

  'DAYS_LOCKOUT',
  'LATE_ALLOWANCE_HOURS',
  'GROUP_CAPACITY',

  'STRIPE_PUBLISHABLE_KEY',
  'STRIPE_SECRET_KEY',
  'STRIPE_WEBHOOK_SECRET',
  'STRIPE_FEE',

  'MAIL_LISTENER_MACHINE',
  'PORT'

];

requiredEnv.forEach((key) => {
  if (!process.env[key]) {
    console.error(`❌ Missing required environment variable: ${key}`);
    process.exit(1);
  }
});


const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');
const logger = require('../logger');
const mongoose = require('../mongoConfig');

// Set port
const port = normalizePort(process.env.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}




process.on('SIGINT', async () => {

  try {
    logger.debug({ message: 'Disconnecting Mongoose...' });
    await mongoose.disconnect();
    logger.debug({ message: 'Disconnecting Mongoose...OK' });
    server.close(() => {
      logger.debug({ message: 'Closed server' });
      process.exit(0);
    });
  } catch (err) {
    logger.error({ message: 'Disconnecting Mongoose...FAIL: ' + err.message });
    process.exit(1);
  }
});